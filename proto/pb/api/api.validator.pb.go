// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *CreateAdminRequest) Validate() error {
	if this.Email == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Email", fmt.Errorf(`value '%v' must not be an empty string`, this.Email))
	}
	if this.Password == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Password", fmt.Errorf(`value '%v' must not be an empty string`, this.Password))
	}
	return nil
}
func (this *CreateAdminResponse) Validate() error {
	return nil
}
func (this *AddPermissionRequest) Validate() error {
	if this.UserId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("UserId", fmt.Errorf(`value '%v' must not be an empty string`, this.UserId))
	}
	if this.Item == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Item", fmt.Errorf(`value '%v' must not be an empty string`, this.Item))
	}
	return nil
}
func (this *AddRoleRequest) Validate() error {
	if this.UserId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("UserId", fmt.Errorf(`value '%v' must not be an empty string`, this.UserId))
	}
	return nil
}
func (this *RemoveRoleRequest) Validate() error {
	if this.UserId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("UserId", fmt.Errorf(`value '%v' must not be an empty string`, this.UserId))
	}
	return nil
}
func (this *SignUpRequest) Validate() error {
	if this.Email == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Email", fmt.Errorf(`value '%v' must not be an empty string`, this.Email))
	}
	if this.Password == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Password", fmt.Errorf(`value '%v' must not be an empty string`, this.Password))
	}
	return nil
}
func (this *SignUpResponse) Validate() error {
	return nil
}
func (this *SignInRequest) Validate() error {
	return nil
}
func (this *SignInResponse) Validate() error {
	if this.ExpireAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ExpireAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ExpireAt", err)
		}
	}
	return nil
}
func (this *GetUserRequest) Validate() error {
	return nil
}
func (this *GetUserResponse) Validate() error {
	if this.User != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.User); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("User", err)
		}
	}
	return nil
}
func (this *ListUsersRequest) Validate() error {
	return nil
}
func (this *ListUsersResponse) Validate() error {
	for _, item := range this.Users {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Users", err)
			}
		}
	}
	return nil
}
func (this *ListUsersDetailedResponse) Validate() error {
	for _, item := range this.Users {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Users", err)
			}
		}
	}
	return nil
}
func (this *DeleteUserRequest) Validate() error {
	return nil
}
func (this *RefreshTokenRequest) Validate() error {
	return nil
}
func (this *RefreshTokenResponse) Validate() error {
	if this.ExpireAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ExpireAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ExpireAt", err)
		}
	}
	return nil
}
func (this *CreateTrackingRequest) Validate() error {
	if this.Time != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Time); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Time", err)
		}
	}
	if !(this.Distance >= 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("Distance", fmt.Errorf(`value '%v' must be greater than or equal to '0'`, this.Distance))
	}
	if nil == this.Location {
		return github_com_mwitkow_go_proto_validators.FieldError("Location", fmt.Errorf("message must exist"))
	}
	if this.Location != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Location); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Location", err)
		}
	}
	return nil
}
func (this *CreateTrackingResponse) Validate() error {
	return nil
}
func (this *DeleteTrackingRequest) Validate() error {
	return nil
}
func (this *GetTrackingRequest) Validate() error {
	return nil
}
func (this *GetTrackingResponse) Validate() error {
	if this.Tracking != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Tracking); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Tracking", err)
		}
	}
	return nil
}
func (this *ListTrackingsRequest) Validate() error {
	return nil
}
func (this *ListTrackingsResponse) Validate() error {
	for _, item := range this.Trackings {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Trackings", err)
			}
		}
	}
	return nil
}
func (this *ReportRequest) Validate() error {
	if this.Duration != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Duration); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Duration", err)
		}
	}
	return nil
}
func (this *ReportResponse) Validate() error {
	return nil
}
func (this *User) Validate() error {
	return nil
}
func (this *DetailedUser) Validate() error {
	return nil
}
func (this *Tracking) Validate() error {
	if this.Time != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Time); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Time", err)
		}
	}
	if this.Location != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Location); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Location", err)
		}
	}
	if this.Weather != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Weather); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Weather", err)
		}
	}
	return nil
}
func (this *Location) Validate() error {
	if !(this.Longitude >= -180) {
		return github_com_mwitkow_go_proto_validators.FieldError("Longitude", fmt.Errorf(`value '%v' must be greater than or equal to '-180'`, this.Longitude))
	}
	if !(this.Longitude <= 180) {
		return github_com_mwitkow_go_proto_validators.FieldError("Longitude", fmt.Errorf(`value '%v' must be lower than or equal to '180'`, this.Longitude))
	}
	if !(this.Latitude >= -90) {
		return github_com_mwitkow_go_proto_validators.FieldError("Latitude", fmt.Errorf(`value '%v' must be greater than or equal to '-90'`, this.Latitude))
	}
	if !(this.Latitude <= 90) {
		return github_com_mwitkow_go_proto_validators.FieldError("Latitude", fmt.Errorf(`value '%v' must be lower than or equal to '90'`, this.Latitude))
	}
	return nil
}
func (this *Weather) Validate() error {
	return nil
}
